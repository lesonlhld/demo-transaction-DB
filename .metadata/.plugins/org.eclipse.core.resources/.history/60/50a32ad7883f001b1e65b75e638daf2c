package stackjava.com.springjdbc.dao;

import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.dao.DataAccessException;

import stackjava.com.springjdbc.entities.User;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDAO {
	
	private JdbcTemplate jdbcTemplate;

	@Transactional
	public void insert(List<User> listUser) {
		String sql = "INSERT INTO user_info (id, name, amount) VALUES (?, ?, ?);";
		for (User user: listUser) {
			jdbcTemplate.update(sql, user.getId(), user.getName(), user.getAmount());
			System.out.println("Inserted user: " + user.getId() +" - " +user.getName());
		}
	}
	

	public void insertWithoutTransaction(List<User> listUser) {
		String sql = "INSERT INTO user_info (id, name, amount) VALUES (?, ?, ?);";
		for (User user: listUser) {
			jdbcTemplate.update(sql, user.getId(), user.getName(), user.getAmount());
			System.out.println("Inserted user: " + user.getId() +" - " +user.getName());
		}
	}
	
    public BigDecimal getCurrentAmount(int id) {
        String sql = "SELECT amount FROM account WHERE id=" + id;
 
        return jdbcTemplate.query(sql, new ResultSetExtractor<BigDecimal>() {
            public BigDecimal extractData(ResultSet resultSet) throws SQLException, DataAccessException {
                return BigDecimal.valueOf(resultSet.getInt("amount"));
            }
        });
    }
    
    @Transactional
    public void transfer(int sourceId, int destId, BigDecimal amount) throws Exception {
        BigDecimal sourceAmount = getCurrentAmount(sourceId);
        BigDecimal destAmount = getCurrentAmount(destId);
 
 
        // Update source account
        BigDecimal subtract = sourceAmount.subtract(amount);
        updateAmount(sourceId, subtract);
        if (subtract.compareTo(BigDecimal.valueOf(20)) <= 0) {
            throw new Exception("Not allow send money if current amount is less than 20$");
        }
 
        // Update dest account
        updateAmount(destId, destAmount.add(amount));
    }
 
    public void updateAmount(int id, BigDecimal amount) {
        String sql = String.format("UPDATE account SET amount=%f WHERE id=%d", amount, id);
 
        jdbcTemplate.execute(sql);
    }

	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}

	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
}
